function sysCall_threadmain()

    usensors={-1,-1,-1}
    for i=1,3,1 do
        usensors[i]=sim.getObjectHandle('Proximity'..i)
    end
    --
    motorHandles={-1,-1,-1,-1}
    barHandles={-1,-1,-1,-1}
    
    bodyElements=sim.getObjectHandle('Summit_XL_visible')
    motorHandles[1]=sim.getObjectHandle('joint_front_left_wheel')
    motorHandles[2]=sim.getObjectHandle('joint_front_right_wheel')
    motorHandles[3]=sim.getObjectHandle('joint_back_right_wheel')
    motorHandles[4]=sim.getObjectHandle('joint_back_left_wheel')
       
    noDetectionDist = 2
    maxDetectionDist = 0.9
    detect = {0,0,0}
    
    braitenbergL={-0.4,-0.8,-1.2, -1.6}
    braitenbergR={-1.6, -1.2,-0.8,-0.4}
    braitengergF={-1,0}
    v0= 4

    
    proxSensDist = {-1, -1, -1}
    -- Prepare 2 floating views with the camera views:
    frontCam=sim.getObjectHandle('Robotnik_frontCamera')
    
    floorView=sim.floatingViewAdd(0.9,0.9,0.2,0.2,0)
    frontView=sim.floatingViewAdd(0.7,0.9,0.2,0.2,0)
    
    sim.adjustView(floorView,frontCam,64)
    sim.adjustView(frontView,frontCam,64)

    fwd = {-1,-1, -1}
    maxVel = 4
    
    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
        local mtx=sim.getObjectMatrix(bodyElements,-1)
        local mtx2=sim.buildMatrix({0,0,0},{0,90*math.pi/180,90*math.pi/180})
        mtx=sim.multiplyMatrices(mtx,mtx2)
        e=sim.getEulerAnglesFromMatrix(mtx)
    
        st = sim.getSimulationTime()
        vLeft= v0
        vRight= v0
        s=sim.getObjectSizeFactor(bodyElements)
        noDetectionDistance=0.05*s
        for i=1,3,1 do
            res,dist=sim.readProximitySensor(usensors[i])
            if (res>0) and (dist<noDetectionDist) then
                proxSensDist[i] = dist
                if (dist<maxDetectionDist) then
                    dist=maxDetectionDist
                end
                fwd[i] = 1
                detect[i]=1-((dist-maxDetectionDist)/(noDetectionDist-maxDetectionDist))
            else
                fwd[i] = 0
                detect[i]=0
            end
        end
        
        if (detect[1] == 0 and ((fwd[2] + fwd[3]) == 2)) then
            if (proxSensDist[2] < (noDetectionDist) and proxSensDist[1] > (maxDetectionDist)) then
                vLeft= vLeft+v0*braitengergF[1]*(1-(proxSensDist[2]/noDetectionDist))
                vRight= vRight+v0*braitengergF[2]*(1-(proxSensDist[2]/noDetectionDist))
                --vLeft = 2
                --vRight = 2
            end
            if (proxSensDist[3] < (noDetectionDist) and proxSensDist[3] > (maxDetectionDist)) then
                vLeft= vLeft+v0*braitengergF[2]*(1-(proxSensDist[3]/noDetectionDist))
                vRight= vRight+v0*braitengergF[1]*(1-(proxSensDist[3]/noDetectionDist))
                --vLeft = 2
                --vRight = 2
            end
        else
        sim.addStatusbarMessage(e[3])
            if(fwd[2] == 0 and fwd[3] == 1) then
                --e[3] = -180*math.pi/180
                angles = -0.1*(math.pi/180)
                sim.addStatusbarMessage(angles)
                while(e[3] < angles) do
 
                    vLeft = -90*math.pi/180
                    vRight = 90*math.pi/180
                    
                    sim.setJointTargetVelocity(motorHandles[1],vLeft)
                    sim.setJointTargetVelocity(motorHandles[2],-vRight)
                    sim.setJointTargetVelocity(motorHandles[3],-vRight)
                    sim.setJointTargetVelocity(motorHandles[4],vLeft)
                                           
                    local mtx=sim.getObjectMatrix(bodyElements,-1)
                    local mtx2=sim.buildMatrix({0,0,0},{0,90*math.pi/180,90*math.pi/180})
                    mtx=sim.multiplyMatrices(mtx,mtx2)
                    e=sim.getEulerAnglesFromMatrix(mtx)
                    
                    print(e[3])
                    sim.addStatusbarMessage(e[3])
                end
            else
                vLeft = math.pi
                vRight = -math.pi
                    for i=1,3,1 do
                        vLeft=vLeft+braitenbergL[i]*detect[i]
                        vRight=vRight+braitenbergR[i]*detect[i]
                       -- vLeft=2
                       -- vRight=-2
                    end
            end

        end

        sim.setJointTargetVelocity(motorHandles[1],vLeft)
        sim.setJointTargetVelocity(motorHandles[2],-vRight)
        sim.setJointTargetVelocity(motorHandles[3],-vRight)
        sim.setJointTargetVelocity(motorHandles[4],vLeft)
        
    end
end

